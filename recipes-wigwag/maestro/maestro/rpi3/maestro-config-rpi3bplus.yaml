unixLogSocket: /tmp/grease.socket
sysLogSocket: /dev/log
linuxKernelLog: true
httpUnixSocket: /tmp/maestroapi.sock
configDBPath: /userdata/etc/maestroConfig.db
clientId: "{{ARCH_SERIAL_NUMBER}}"
watchdog:
    path: "/wigwag/system/lib/rp100wd.so"
    opt1: "/var/deviceOSkeepalive"
    opt2: "30"
network:
    interfaces:
        - if_name: eth0
          clear_addresses: true
          dhcpv4: true
          # set the mac addresses for this interface also:
          hw_addr: "{{ARCH_ETHERNET_MAC}}"
        - if_name: wlan0
          clear_addresses: true
          dhcpv4: true
          hw_addr: "{{ARCH_ETHERNET_MAC}}"
processes:
    reaper_interval: 1500
platform_readers:
  - platform: "fsonly"
    params:
      identityPath: "/userdata/edge_gw_config/identity.json"
var_defs:
   - key: "TMP_DIR"
     value: "/tmp"
   - key: "WIGWAG_NODE_PATH"
     value: "/wigwag/devicejs-core-modules/node_modules"
   - key: "WIGWAG_DIR"
     value: "/wigwag"
   - key: "NODE_EXEC"
     value: "/usr/bin/node"
   - key: "DEVICEJS_ROOT"
     value: "/wigwag/devicejs-ng"
   - key: "DEVJS_CORE_MODULES"
     value: "/wigwag/devicejs-core-modules"
   - key: "MAESTRO_RUNNER_DIR"
     value: "/wigwag/devicejs-core-modules/maestroRunner"
   - key: "SSL_CERTS_PATH"
     value: "/userdata/edge_gw_config/.ssl"
   - key: "LOCAL_DEVICEDB_PORT"
     value: 9000
   - key: "LOCAL_DATABASE_STORAGE_DIRECTORY"
     value: "/userdata/etc/devicejs/db"
   - key: "RELAY_VERSIONS_FILE"
     value: "/wigwag/etc/versions.json"
   - key: "FACTORY_VERSIONS_FILE"
     value: "/mnt/.overlay/factory/wigwag/etc/versions.json"
   - key: "USER_VERSIONS_FILE"
     value: "/mnt/.overlay/user/slash/wigwag/etc/versions.json"
   - key: "UPGRADE_VERSIONS_FILE"
     value: "/mnt/.overlay/upgrade/wigwag/etc/versions.json"
devicedb_conn_config:
    devicedb_uri: "https://{{ARCH_DEVICE_ID}}:9000" #default uri
    devicedb_prefix: "maestro.configs" #default prefix
    devicedb_bucket: "lww" #default bucket
    relay_id: "{{ARCH_DEVICE_ID}}" #default relay id
    ca_chain: "{{SSL_CERTS_PATH}}/ca-chain.cert.pem" #default chain cert file name     
mdns:
  # disable: true
  static_records:
   - name: "WigWagRelay"
     service: "_wwservices._tcp"  # normally something like https or ftp
     # domain: "local"     # local is default
     interfaces: "eth0"
     not_interfaces: "Witap0"
     port: 3131
     text:
      - "wwid={{ARCH_SERIAL_NUMBER}}"
     hostname: "wigwaggateway"
   - name: "WigWagRelay_{{ARCH_SERIAL_NUMBER}}"
     service: "_wwservices._tcp"  # normally something like https or ftp
     # domain: "local"     # local is default
     interfaces: "eth0"
     not_interfaces: "Witap0"
     port: 3131
     text:
      - "wwid={{ARCH_SERIAL_NUMBER}}"
     hostname: "{{ARCH_SERIAL_NUMBER}}"
symphony:
# symphony system management APIs
    # defaults to 10:
    disable_sys_stats: true
    sys_stats_count_threshold: 15     # send if you have 15 or more stats queued
    sys_stats_time_threshold: 120000  # every 120 seconds send stuff, no matter what
    client_cert: "{{ARCH_CLIENT_CERT_PEM}}"
    client_key: "{{ARCH_CLIENT_KEY_PEM}}"
    host: "{{ARCH_GW_SERVICES_RESRC}}"
    url_logs: "{{ARCH_GW_SERVICES_URL}}/relay-logs/logs"
    url_stats: "{{ARCH_GW_SERVICES_URL}}/relay-stats/stats_obj"
    # port: "{{ARCH_RELAY_SERVICES_PORT}}"
targets:
   - file: "/wigwag/log/devicejs.log"
     rotate:
         max_files: 4
         max_file_size: 10000000  # 10MB max file size
         max_total_size: 42000000
         rotate_on_start: true
     delim: "\n"
     format_time: "[%ld:%d] "
     format_level: "<%s> "
     format_tag: "{%s} "
     format_origin: "(%s) "
     filters:
       - levels: warn
         format_pre: "\u001B[33m"    # yellow
         format_post: "\u001B[39m"
       - levels: error
         format_pre: "\u001B[31m"    # red
         format_post: "\u001B[39m"
   - name: "toCloud"  # this is a special target for sending to the cloud. It must send as a JSON
     format_time: "\"timestamp\":%ld%03d, "
     format_level: "\"level\":\"%s\", "
     format_tag: "\"tag\":\"%s\", "
     format_origin: "\"origin\":\"%s\", "
     format_pre_msg: "\"text\":\""
     format_post: "\"},"
     flag_json_escape_strings: true
     filters:
       - levels: warn
         format_pre: "{"     # you will wrap this output with { "log": [ OUTPUT ] }
       - levels: error
         format_pre: "{"     # you will wrap this output with { "log": [ OUTPUT ] }
static_file_generators:
   - name: "devicejs"
     template_file: "/wigwag/etc/template/devicejs.template.conf"
     output_file: "/wigwag/etc/devicejs/devicejs.conf"
   - name: "devicedb"
     template_file: "/wigwag/etc/template/devicedb.template.conf"
     output_file: "/wigwag/etc/devicejs/devicedb.yaml"
   - name: "relayTerm"
     template_file: "/wigwag/etc/template/relayTerm.template.json"
     output_file: "/wigwag/wigwag-core-modules/relay-term/config/config.json"
   - name: "radioProfile"
     template_file: "/wigwag/etc/template/radioProfile.template.json"
     output_file: "/wigwag/devicejs-core-modules/rsmi/radioProfile.config.json"
   - name: "ca_pem"
     template: "{{ARCH_CA_CERT_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/ca.cert.pem"
   - name: "intermediate_pem"
     template: "{{ARCH_INTERMEDIATE_CERT_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/intermediate.cert.pem"
   - name: "client_key"
     template: "{{ARCH_CLIENT_KEY_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/client.key.pem"
   - name: "client_cert"
     template: "{{ARCH_CLIENT_CERT_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/client.cert.pem"
   - name: "server_key"
     template: "{{ARCH_SERVER_KEY_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/server.key.pem"
   - name: "server_cert"
     template: "{{ARCH_SERVER_CERT_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/server.cert.pem"
   - name: "ca_chain"
     template: "{{ARCH_CA_CHAIN_CERT_PEM}}"
     output_file: "{{SSL_CERTS_PATH}}/ca-chain.cert.pem"
container_templates:
   - name: "deviceJS_process"
     immutable: true  # don't store in DB
     depends_on:
        - "devicejs"
     cgroup:                 # will implement later
        mem_limit: 10000000
     die_on_parent_death: true
     inherit_env: true
     add_env:
        - "LD_PRELOAD=/usr/lib/libcrypto.so.1.0.2"
        - "DEVJS_ROOT={{DEVICEJS_ROOT}}"
        - "DEVJS_CONFIG_FILE=/wigwag/etc/devicejs/devicejs.conf"
        - "NODE_PATH={{WIGWAG_NODE_PATH}}"
     exec_cmd: "{{NODE_EXEC}}"        # will use PATH if not absolute path (as per execvp())
     send_composite_jobs_to_stdin: true
     send_grease_origin_id: true
     exec_pre_args:
        - "--max-old-space-size=128"
        - "--max-semi-space-size=1"
        - "{{MAESTRO_RUNNER_DIR}}/index.js"
     composite_config: >
        {
           "debug":true
        }
   - name: "ble_node_process"
     immutable: true  # don't store in DB
     depends_on:
        - "devicejs"
     cgroup:                 # will implement later
        mem_limit: 10000000
     die_on_parent_death: true
     inherit_env: true
     add_env:
        - "LD_PRELOAD=/usr/lib/libcrypto.so.1.0.2"
        - "DEVJS_ROOT={{DEVICEJS_ROOT}}"
        - "DEVJS_CONFIG_FILE=/wigwag/etc/devicejs/devicejs.conf"
        - "NODE_PATH={{WIGWAG_NODE_PATH}}"
     exec_cmd: "{{NODE_EXEC}}"        # will use PATH if not absolute path (as per execvp())
     send_composite_jobs_to_stdin: true
     send_grease_origin_id: true
     exec_pre_args:
        - "--max-old-space-size=1024"
        - "--max-semi-space-size=1"
        - "{{MAESTRO_RUNNER_DIR}}/index.js"
     composite_config: >
        {
           "debug":true
        }
   - name: "node_process"
     die_on_parent_death: true
     immutable: true  # don't store in DB
     cgroup:                 # will implement later
        mem_limit: 10000000
     inherit_env: true
     exec_cmd: "{{NODE_EXEC}}"        # will use PATH if not absolute path (as per execvp())
     exec_pre_args:
        - "--max-old-space-size=128"
        - "--max-semi-space-size=1"
jobs:
   - job: "devicedb"
     immutable: true
     die_on_parent_death: true
     exec_cmd: "/wigwag/system/bin/devicedb"
     restart: true
     restart_limit: 5000
     restart_pause: 1
     exec_args:
        - "start"
        - "-conf=/wigwag/etc/devicejs/devicedb.yaml"
   - job: "devicejs"
     defer_running_status: 30000   # waits 8 seconds before marking this Job as RUNNING, which delays all dependencies
     depends_on:
        - "devicedb"
     container_template: "node_process"
     immutable: true
     die_on_parent_death: true
     env:
        - "LD_PRELOAD=/usr/lib/libcrypto.so.1.0.2"
        - "NODE_PATH={{DEVICEJS_ROOT}}/node_modules"
        - "DEVJS_LOGGER={\"modulepath\":\"{{WIGWAG_NODE_PATH}}/grease-log-client\",\"type\":\"global\"}"
     exec_cmd: "{{DEVICEJS_ROOT}}/src/runtime/start"
     restart: true
     restart_limit: 5000
     restart_pause: 10
     exec_args:
        - "--config=/wigwag/etc/devicejs/devicejs.conf"
   - job: "MbedDeviceJSBridge"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../mbed/mbed-devicejs-bridge"
     container_template: "deviceJS_process"
     composite_id: "mbed"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
            "debug": true,
            "mapUnplacedDevices": true,
            "ignoreDevicesById" : [],
            "relayID": "{{ARCH_SERIAL_NUMBER}}",
            "mbedAPIKey": "ak_1MDE1ZDUwYTFmYmM2MDI0MjBhMDExMTA5MDAwMDAwMDA015e967fe74802420a01390300000000aJOhYRqzTXINzN9Aw2OkV5WrG0YwgmKS",
            "spawnEdgeCore": false,
            "edgeExecCmd": ["/apps/mbed-cloud-edge-confidential-w/build/mcc-linux-x86/existing/bin/edge-core","/tmp/edge.sock","9101"],
            "ssl":{
              "key":"{{SSL_CERTS_PATH}}/client.key.pem",
              "cert":"{{SSL_CERTS_PATH}}/client.cert.pem"
            }
        }
   - job: "core-interfaces"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../core-interfaces"
     container_template: "deviceJS_process"
     composite_id: "all-modules"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {}
   - job: "RelayStatsSender"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/RelayStatsSender"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "cloudAddress":"{{ARCH_GW_SERVICES_URL}}",
          "relayID":"{{ARCH_SERIAL_NUMBER}}",
          "ssl":{
              "key":"{{SSL_CERTS_PATH}}/client.key.pem",
              "cert":"{{SSL_CERTS_PATH}}/client.cert.pem",
              "ca":[
                  "{{SSL_CERTS_PATH}}/ca.cert.pem",
                  "{{SSL_CERTS_PATH}}/intermediate.cert.pem"
              ]
          },
          "versionsFile":"{{RELAY_VERSIONS_FILE}}",
          "factoryVersionsFile": "{{FACTORY_VERSIONS_FILE}}",
          "userVersionsFile": "{{USER_VERSIONS_FILE}}",
          "upgradeVersionsFile": "{{UPGRADE_VERSIONS_FILE}}",
          "relayInfo": {
              "serialNumber": "{{ARCH_SERIAL_NUMBER}}",
              "hardwareVersion": "{{ARCH_HARDWARE_VERSION}}",
              "radioConfig": "{{ARCH_RADIO_CONFIG}}",
              "ledConfig": "{{ARCH_LED_COLOR_PROFILE}}",
              "cloud": "{{ARCH_GW_SERVICES_URL}}",
              "ethernetMac": "{{ARCH_ETHERNET_MAC}}"
          }
        }
   - job: "LEDController"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/LEDController"
     container_template: "deviceJS_process"
     composite_id: "core"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "ledBrightness": 255,
          "heartbeatBrightness": 128,
          "ledColorProfile":"{{ARCH_LED_COLOR_PROFILE}}",
          "ledDriverSocketPath": "/var/deviceOSkeepalive"
        }
   - job: "VirtualDeviceDriver"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/VirtualDeviceDriver"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "deviceControllersDirectory": "templates",
          "hideTemplates": [ "VideoCamera" ],
          "logLevel": 1
        }
   - job: "bluetoothlowenergy"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../bluetoothlowenergy"
     container_template: "ble_node_process"
     composite_id: "ble"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "hciDeviceID": 0,
          "version": "1.0.2",
          "logLevel": 5,
          "activityLength": 100,
          "platform":"",
          "serialNumber": "{{ARCH_SERIAL_NUMBER}}"
        }
   - job: "zigbeeHA"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../zigbeeHA"
     container_template: "deviceJS_process"
     composite_id: "zigbee"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "siodev":"/dev/ttyUSB0",
          "devType":0,
          "newNwk":false,
          "channelMask":25,
          "baudRate":115200,
          "log_level":1,
          "networkRefreshDuration":17000,
          "panIdSelection":"randomInRange",
          "panId":23,
          "platform":"",
          "logLevel": 2 //Available- info- 2, debug- 3, trace- 4, error- 0, warn- 1
        }
   - job: "OnsiteEnterpriseServer"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/onsite-enterprise-server"
     container_template: "deviceJS_process"
     composite_id: "user"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "prodPort": "3131",
          "modelDefinitions": "/api/models",
          "logRequests": false,
          "logLevel": 2
        }
   - job: "DevStateManager"
     immutable: true  # don't store in DB
     exec_cmd: "${thisdir}/../../wigwag-core-modules/DevStateManager"
     container_template: "deviceJS_process"
     composite_id: "core"
     restart: true
     restart_limit: 5000
     restart_pause: 90
     config: |
        {
          "logLevel": 1,
          "pollingResolution": 500,
          "defaultPollingRate": 51000,
          "maxPollingCycles": 65535,
          "pollingSchemes": {
              "fast": {
                  "interval": 21500,
                  "interfaces": [
                      "Facades/HasTemperature",
                      "Facades/ThermostatGStatus",
                      "Facades/ThermostatSupplyTemperature",
                      "Facades/ThermostatReturnTemperature",
                      "Facades/ThermostatW1Status",
                      "Facades/ThermostatW2Status",
                      "Facades/ThermostatY1Status",
                      "Facades/ThermostatY2Status"
                  ]
              },
              "medium": {
                  "interval": 293500,
                  "interfaces": [
                      "Facades/ThermostatMode",
                      "Facades/OccupiedCoolTemperatureLevel",
                      "Facades/OccupiedHeatTemperatureLevel",
                      "Facades/UnoccupiedCoolTemperatureLevel",
                      "Facades/UnoccupiedHeatTemperatureLevel",
                      "Facades/ThermostatFanMode",
                      "Facades/OccupancyMode"
                  ]
              },
              "slow": {
                  "interval": 900000,
                  "interfaces": [
                  ]
              },
              "never": {
                  "interval": 0,
                  "interfaces": [
                      "Facades/KeypadLockLevel",
                      "Facades/TemperatureDisplayMode",
                      "Facades/ThermostatDeadband",
                      "Facades/Humidity",
                      "Facades/HasMotion",
                      "Facades/UnoccupiedAutoTemperatureLevel",
                      "Facades/OccupiedAutoTemperatureLevel"
                  ]
              }
          }
        }
config_end: true
