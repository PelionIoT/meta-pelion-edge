#! /bin/sh
# /etc/init.d/wwrelay: initialized the WigWag

### BEGIN INIT INFO
# Provides:             wwrelay
# Required-Start:       $remote_fs $time
# Required-Stop:        $remote_fs $time
# Should-Start:
# Should-Stop:
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    System logger
### END INIT INFO
# Source function library.

source /etc/init.d/functions
WIGWAGROOT="/wigwag"
WIGWAGLOGROOT="/wigwag/log"
PIDROOT="/var/run"
SSLROOT="/mnt/.boot/.ssl"
RunnerSSLROOT="/userdata/edge_gw_config/.ssl"
maestroOK=$PIDROOT"/maestroOK"
GPIO_DIR=${WIGWAGROOT}"/wwrelay-utils/GPIO"
WWRELAY_LOG=${WIGWAGLOGROOT}"/wwrelay.log"
GPIO_LOG=${WIGWAGLOGROOT}"/log/gpio.log"
DBDIR="/userdata/etc/devicejs/db"
RELAY_SETUP_FILE=${WIGWAGROOT}"/wwrelay-utils/I2C/relaySetup.json"
MBED_SETUP_FILE=${WIGWAGROOT}"/wwrelay-utils/I2C/mbedEdgeGatewaySetup.json"
RELAYTERMSTARTER=${WIGWAGROOT}"/wigwag-core-modules/relay-term/bin/relay-term"
RELAYTERM=${WIGWAGROOT}"/wigwag-core-modules/relay-term/src/index.js"
RELAYTERMCONF=${WIGWAGROOT}"/wigwag-core-modules/relay-term/config/config.json"
SUPPORTCERTROOT=${WIGWAGROOT}"/devicejs-core-modules/AppServer/Certs"
establish_tunnel=0;
echo "tempnuke" > $WWRELAY_LOG
GW_IDENTITY_FILE="/userdata/edge_gw_config/identity.json"
# eeprog /dev/i2c-1 0x55 -f -r 0:10 2> /dev/null
# 	if [[ $? -eq 0 ]]; then
# 		hardwareversion="relay"
# 	else
# 		hardwareversion="RP200"
# 		modprobe at24
# 	fi

updateEthernetMAC(){
    ifconfig eth0 down
    hexchars="0123456789ABCDEF"
    end=$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/:\1/g' )
    ifconfig eth0 hw ether 00:a5:09$end
    ifconfig eth0 up
}

_dhcpcfix(){
	updateEthernetMAC;
	udhcpc -n
	sleep 5
	killall udhcpc
}

# _dhcpcfix

_log() {
	echo -e "$1" >> $WWRELAY_LOG
	echo -e "$1"
}
_logrotate() {
	if [ -x $WWRELAY_LOG ] ; then
		mv $WWRELAY_LOG $WWRELAY_LOG.1
	fi
	if [ -x $GPIO_LOG ] ; then
		mv $GPIO_LOG $GPIO_LOG.1
	fi
}

_led(){
	if [[ $hardwareversion = "relay" ]]; then
		LEDCONFIG=$(eeprog -f -r 96:2 /dev/i2c-1 0x50 2>/dev/null )
		if [[ "$LEDCONFIG" == "01" ]]; then
			echo -e led $1 $2 $3 | socat unix-sendto:/var/deviceOSkeepalive STDIO
		elif [[ "$LEDCONFIG" == "02" ]]; then
			echo -e led $1 $3 $2 | socat unix-sendto:/var/deviceOSkeepalive STDIO
		fi
	else
		echo -e led $(($1 * 25)) $(($2 * 25)) $(($3 * 25)) | socat unix-sendto:/var/deviceOSkeepalive STDIO
	fi
}

_doPostUpgrade() {
	if [ -e /userdata/postUpgrade.sh ] ; then
		_log "Running postUpgrade script"
		/userdata/postUpgrade.sh
		/bin/rm /userdata/postUpgrade.sh
	fi
}
_doPrepDb() {
	if [ ! -e ${DBDIR} ]; then
		_log "Creating $DBDIR"
		mkdir -p ${DBDIR}
	fi
}

_eepromToSSH(){
	:
}

_doUDEVreload(){
	udevadm control --reload-rules && udevadm trigger
}
_doGenerateSupportCertificates() {
	if [ ! -e $SUPPORTCERTROOT ]; then
		mkdir -p $SUPPORTCERTROOT
		_log "Created $SUPORTCERTROOT"
	fi
	if [ ! -e ${WIGWAGROOT}/devicejs-core-modules/AppServer/Certs/ca.crt ]; then
		_log "Generating support certificates"
		cd ${WIGWAGROOT}/devicejs-core-modules/AppServer/Certs
		pwgen 50 1 > passphrase
		openssl genrsa -des3 -passout file:passphrase -out ca.key 1024
		openssl req -new -passin file:passphrase -key ca.key -out ca.csr -subj "/C=US/ST=Texas/L=Austin/O=WigWag Inc./OU=Consumer/CN=www.wigwag.com/emailAddress=support@wigwag.com"
		openssl x509 -req -days 7300 -in ca.csr -out ca.crt -passin file:passphrase -signkey ca.key
		openssl genrsa -des3 -passout file:passphrase -out server.key 1024
		openssl req -new -passin file:passphrase -key server.key -out server.csr -subj "/C=US/ST=Texas/L=Austin/O=WigWag Inc./OU=Consumer/CN=www.wigwag.com/emailAddress=support@wigwag.com"
		cp server.key server.key.passphrase
		openssl rsa -in server.key.passphrase -passin file:passphrase -out server.key
		openssl x509 -req -days 7300 -in server.csr -passin file:passphrase -signkey server.key -out server.crt
		rm passphrase
	fi
}

EEMESAGE=""
_eepromBurned(){
	if [[ -s $GW_IDENTITY_FILE ]]; then
		:
	else
		EEMESAGE="$EEMESSAGE gateway identity file is not of proper size at $GW_IDENTITY_FILE"
	fi
	if [[ $EEMESAGE == "" ]]; then
		echo 1
	else
		echo 0
	fi
	# if [[ $hardwareversion = "relay" ]]; then
	# 	wwrl=$(eeprog -f -r 0:1 /dev/i2c-1 0x50 2>/dev/null )
	# 	h1=$(eeprog -f -r 0:4 /dev/i2c-1 0x51 2> /dev/null )
	# 	h2=$(eeprog -f -r 0:4 /dev/i2c-1 0x52 2> /dev/null )
	# 	h3=$(eeprog -f -r 0:4 /dev/i2c-1 0x53 2> /dev/null )
	# 	if [[  "$wwrl" = "W" && "$h1" = "http" && "$h2" = "http" && "$h3" = "http" ]]; then
	# 		:
	# 	else
	# 		EEMESAGE="Actual EEPROM has bad data"
	# 	fi
	# 	if [[  -s $SSLROOT"/client.cert.pem" && -s $SSLROOT"/ca.cert.pem" && -s $SSLROOT"/client.key.pem" && -s $SSLROOT"/intermediate.cert.pem" && -s $SSLROOT"/server.cert.pem" && -s $SSLROOT"/server.key.pem" ]]; then
	# 		:
	# 	else
	# 		EEMESAGE="$EEMESAGE and the ssl files are not of proper size at $SSLROOT"
	# 	fi
	# 	if [[ $EEMESAGE = "" ]]; then
	# 		echo 1
	# 	else
	# 		echo 0
	# 	fi
	# else
	# 	#need to read the eeporom at24 here, but lets just skip until I can see what burned one looks like

	# 	echo 1
	# fi
}

_runnerWritten(){
	if [[ -s $RunnerSSLROOT"/client.cert.pem" && -s $RunnerSSLROOT"/ca.cert.pem" && -s $RunnerSSLROOT"/client.key.pem" && -s $RunnerSSLROOT"/intermediate.cert.pem" && -s $RunnerSSLROOT"/server.cert.pem" && -s $RunnerSSLROOT"/server.key.pem" ]]; then
		echo 1
	else
		echo 0
	fi
}

tloop(){
	echo "I am entering the tloop function" > /tmp/tloop
	if [[ $establish_tunnel -eq 1 ]]; then
		echo "I was told to tloop" > /tmp/tloop
		/wigwag/wwrelay-utils/dev-tools/scripts/tunnelloop.sh &
	fi
}

start(){
	_logrotate
	rm -rf $maestroOK
	_log "Starting WWRELAY"
	good=$(_eepromBurned);
	_led 10 0 10
	updateEthernetMAC
	_doPostUpgrade
	_doPrepDb
	_doGenerateSupportCertificates
	_doUDEVreload
	#_eepromBurned
	#exit
	#_log "Results from the eepromBurn check $good"

	if [[ $good -eq 1 ]]; then
		eepromSet=1;
		cd ${WIGWAGROOT}/wwrelay-utils/I2C
		pwd

		# Make sure edge-core is running all time. Start a script to monitor edge-core until maestro implements this feature
		/wigwag/wwrelay-utils/debug_scripts/run_mbed_edge_core.sh >& /wigwag/log/run_mbed_edge_core.log &

		# Detect edge-core is now claimed. Burn eeprom and reboot. Temp fix until maestro implements this
		/wigwag/wwrelay-utils/debug_scripts/check_edge_connection.sh >& /wigwag/log/check_edge_connection.log &

		# if [ -d /userdata/mbed ]; then
		# 	_log "Detected edge-gw. Reading edge eeprom..."
		# 	/usr/bin/node ./mbed-edge-eeprom-reader.js -c $MBED_SETUP_FILE >> $WWRELAY_LOG 2>&1
		# else
		# 	_log "Detected wigwag gateway. Reading ww eeprom..."
		# 	/usr/bin/node ./ww_eeprom_reader.js -c $RELAY_SETUP_FILE >> $WWRELAY_LOG 2>&1
		# fi
		#/usr/bin/node ./ww_eeprom_reader.js -c $RELAY_SETUP_FILE
		# OUT=$?
		# if [ $OUT -eq 0 ]; then

		# 	stillgood=$(_runnerWritten)
		# 	if [[ $stillgood -eq 1 ]]; then
		# 		success
		# 		_log "ww_eeprom_reader generated relay.config.json successfully"
				PATH=/wigwag/system/lib/bash:$PATH /wigwag/system/bin/json2sh $GW_IDENTITY_FILE /wigwag/system/lib/bash/relaystatics.sh
			# else
			# 	failure
			# 	_log "ssl files are not of proper size at $RunnerSSLROOT"
			# 	eepromSet=0;
			# fi
		# else
		# 	eepromSet=0;
		# 	failure
		# 	_log "something is wrong with ww_eeprom_reader.js"
		# fi
	else
		_log "Identity failed first check: $EEMESAGE"
		eepromSet=0;
	fi
	if [[ $eepromSet -eq 0 ]]; then
		failure
		_log " Bad config, not starting, do something else"
		_led 10 10 0
		updateEthernetMAC;
		udhcpc -n
		# #stop the watchdog here with a humanhalt
		# /etc/init.d/deviceOS-watchdog humanhalt
		# if [[ $hardwareversion = "relay" ]]; then
		# 	_log "starting leddaemon"
		# 	/wigwag/system/bin/leddaemon
		# fi
		# sleep 1
		# _log "$(ps ax | grep ledda)"
		# _log "starting scanner"
		# /wigwag/system/bin/scanner /dev/input/event1
		# sleep 1
		# _log "$(ps ax | grep scan)"
		# _log "exiting with a 1"
		tloop;
		exit 7
	else
		echo 1 > $maestroOK
		_log "maestro is OK"
		echo "I am saying maestro is ok (wwrelay)" >> /wigwag/log/deviceOSWD.log
		sleep 2
		sync
		tloop;
		exit 0
	fi
}

stop(){
	_log "Need to implement a stop function"
}

status(){
	if [[ -e $maestroOK ]]; then
		success
		echo " wwrelay had a clean start and other services are ok to begin"
		exit 0
	else
		failure
		echo " wwrelay had a corrupted start and other services are NOT ok to begin"
		exit 3
	fi
}

case "$1" in
	start) start; ;;
	#
	stop) stop; ;;
  	#
  	status) status; ;;
  	#
  esac

